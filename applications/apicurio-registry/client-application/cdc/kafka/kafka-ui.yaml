apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  labels:
    app: kafka-ui
    app.kubernetes.io/part-of: strimzi-kafka-cluster-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      imagePullSecrets:
        - name: docker-secret
      containers:
        - name: kafka-ui
          image: provectuslabs/kafka-ui:latest
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: "Probe Application"
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: kafka-cluster-kafka-bootstrap:9093
            - name: KAFKA_CLUSTERS_0_SCHEMAREGISTRY
              value: https://apicurio-registry-api-rhaf-apicurio.apps.dev-eng-ocp4-mas.dev.3sca.net/apis/ccompat/v7
            - name: KAFKA_CLUSTERS_0_SCHEMAREGISTRYAUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  key: client-id
                  name: probe-application-credentials
            - name: KAFKA_CLUSTERS_0_SCHEMAREGISTRYAUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: client-secret
                  name: probe-application-credentials
          imagePullPolicy: Always
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1024Mi"
              cpu: "1000m"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui-service
spec:
  selector:
    app: kafka-ui
  type: NodePort
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 31006
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: kafka-ui
spec:
  to:
    kind: Service
    name: kafka-ui-service
    weight: 100
  port:
    targetPort: 8080
  tls:
    termination: edge
  wildcardPolicy: None